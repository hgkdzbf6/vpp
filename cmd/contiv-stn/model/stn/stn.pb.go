// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stn.proto

/*
Package stn is a generated protocol buffer package.

Package stn defines STN (Steal the NIC) GRPC service.

It is generated from these files:
	stn.proto

It has these top-level messages:
	STNRequest
	STNReply
*/
package stn

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// STNRequest represents a request to steal or release of an interface.
type STNRequest struct {
	// The interface to be stolen / released.
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// True if DHCP is enabled on the interface.
	DhcpEnabled bool `protobuf:"varint,2,opt,name=dhcp_enabled,json=dhcpEnabled" json:"dhcp_enabled,omitempty"`
}

func (m *STNRequest) Reset()                    { *m = STNRequest{} }
func (m *STNRequest) String() string            { return proto.CompactTextString(m) }
func (*STNRequest) ProtoMessage()               {}
func (*STNRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *STNRequest) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *STNRequest) GetDhcpEnabled() bool {
	if m != nil {
		return m.DhcpEnabled
	}
	return false
}

// The reply to the STNRequest. Contians the original config of the stolen interface.
type STNReply struct {
	// Result code. 0 = success, non-zero = error.
	Result uint32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	// Error string in case that result != 0.
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// PCI address of the interface.
	PciAddress string `protobuf:"bytes,3,opt,name=pci_address,json=pciAddress" json:"pci_address,omitempty"`
	// List of IP addresses assigned to the interface.
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	// List of routes related to the interface.
	Routes []*STNReply_Route `protobuf:"bytes,5,rep,name=routes" json:"routes,omitempty"`
}

func (m *STNReply) Reset()                    { *m = STNReply{} }
func (m *STNReply) String() string            { return proto.CompactTextString(m) }
func (*STNReply) ProtoMessage()               {}
func (*STNReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *STNReply) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *STNReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *STNReply) GetPciAddress() string {
	if m != nil {
		return m.PciAddress
	}
	return ""
}

func (m *STNReply) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *STNReply) GetRoutes() []*STNReply_Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

// A route related to the interface.
type STNReply_Route struct {
	// Destination subnet prefix.
	DestinationSubnet string `protobuf:"bytes,1,opt,name=destination_subnet,json=destinationSubnet" json:"destination_subnet,omitempty"`
	// Next hop IP address.
	NextHopIp string `protobuf:"bytes,2,opt,name=next_hop_ip,json=nextHopIp" json:"next_hop_ip,omitempty"`
}

func (m *STNReply_Route) Reset()                    { *m = STNReply_Route{} }
func (m *STNReply_Route) String() string            { return proto.CompactTextString(m) }
func (*STNReply_Route) ProtoMessage()               {}
func (*STNReply_Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *STNReply_Route) GetDestinationSubnet() string {
	if m != nil {
		return m.DestinationSubnet
	}
	return ""
}

func (m *STNReply_Route) GetNextHopIp() string {
	if m != nil {
		return m.NextHopIp
	}
	return ""
}

func init() {
	proto.RegisterType((*STNRequest)(nil), "stn.STNRequest")
	proto.RegisterType((*STNReply)(nil), "stn.STNReply")
	proto.RegisterType((*STNReply_Route)(nil), "stn.STNReply.Route")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for STN service

type STNClient interface {
	// The request to steal (unconfigure) an interface identified by its name.
	StealInterface(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error)
	// The request to revert config of a previously "stolen" (unconfigured) interface.
	ReleaseInterface(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error)
	// Request to return information about the stolen interface.
	StolenInterfaceInfo(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error)
}

type sTNClient struct {
	cc *grpc.ClientConn
}

func NewSTNClient(cc *grpc.ClientConn) STNClient {
	return &sTNClient{cc}
}

func (c *sTNClient) StealInterface(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error) {
	out := new(STNReply)
	err := grpc.Invoke(ctx, "/stn.STN/StealInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTNClient) ReleaseInterface(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error) {
	out := new(STNReply)
	err := grpc.Invoke(ctx, "/stn.STN/ReleaseInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTNClient) StolenInterfaceInfo(ctx context.Context, in *STNRequest, opts ...grpc.CallOption) (*STNReply, error) {
	out := new(STNReply)
	err := grpc.Invoke(ctx, "/stn.STN/StolenInterfaceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for STN service

type STNServer interface {
	// The request to steal (unconfigure) an interface identified by its name.
	StealInterface(context.Context, *STNRequest) (*STNReply, error)
	// The request to revert config of a previously "stolen" (unconfigured) interface.
	ReleaseInterface(context.Context, *STNRequest) (*STNReply, error)
	// Request to return information about the stolen interface.
	StolenInterfaceInfo(context.Context, *STNRequest) (*STNReply, error)
}

func RegisterSTNServer(s *grpc.Server, srv STNServer) {
	s.RegisterService(&_STN_serviceDesc, srv)
}

func _STN_StealInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STNServer).StealInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stn.STN/StealInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STNServer).StealInterface(ctx, req.(*STNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STN_ReleaseInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STNServer).ReleaseInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stn.STN/ReleaseInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STNServer).ReleaseInterface(ctx, req.(*STNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STN_StolenInterfaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STNServer).StolenInterfaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stn.STN/StolenInterfaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STNServer).StolenInterfaceInfo(ctx, req.(*STNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _STN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stn.STN",
	HandlerType: (*STNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StealInterface",
			Handler:    _STN_StealInterface_Handler,
		},
		{
			MethodName: "ReleaseInterface",
			Handler:    _STN_ReleaseInterface_Handler,
		},
		{
			MethodName: "StolenInterfaceInfo",
			Handler:    _STN_StolenInterfaceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stn.proto",
}

func init() { proto.RegisterFile("stn.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xeb, 0x40,
	0x14, 0x85, 0x5f, 0x9a, 0xd7, 0xd2, 0xdc, 0xbc, 0xf6, 0xe9, 0x54, 0x24, 0x74, 0xa1, 0xb1, 0x20,
	0x04, 0xc4, 0x2e, 0xaa, 0xe0, 0xba, 0x0b, 0xc1, 0x6e, 0xba, 0x98, 0x94, 0x6e, 0xc3, 0x34, 0xb9,
	0xa5, 0x03, 0xe9, 0xcc, 0x38, 0x33, 0x01, 0x5d, 0xfa, 0x6f, 0xfc, 0x99, 0x92, 0x69, 0x52, 0x75,
	0x25, 0x2e, 0xef, 0x77, 0x72, 0x4f, 0xce, 0x3d, 0x0c, 0x04, 0xc6, 0x8a, 0xa9, 0xd2, 0xd2, 0x4a,
	0xe2, 0x1b, 0x2b, 0x26, 0x6b, 0x80, 0x74, 0xb5, 0xa4, 0xf8, 0x5c, 0xa1, 0xb1, 0xe4, 0x1a, 0x86,
	0x5c, 0x58, 0xd4, 0x5b, 0x96, 0x63, 0x26, 0xd8, 0x1e, 0x23, 0x2f, 0xf6, 0x92, 0x80, 0x0e, 0x8e,
	0x74, 0xc9, 0xf6, 0x48, 0xae, 0xe0, 0x5f, 0xb1, 0xcb, 0x55, 0x86, 0x82, 0x6d, 0x4a, 0x2c, 0xa2,
	0x4e, 0xec, 0x25, 0x7d, 0x1a, 0xd6, 0xec, 0xf1, 0x80, 0x26, 0x6f, 0x1d, 0xe8, 0x3b, 0x63, 0x55,
	0xbe, 0x92, 0x73, 0xe8, 0x69, 0x34, 0x55, 0x69, 0x9d, 0xdd, 0x80, 0x36, 0x13, 0x39, 0x83, 0x2e,
	0x6a, 0x2d, 0xb5, 0x33, 0x08, 0xe8, 0x61, 0x20, 0x97, 0x10, 0xaa, 0x9c, 0x67, 0xac, 0x28, 0x34,
	0x1a, 0x13, 0xf9, 0x4e, 0x03, 0x95, 0xf3, 0xf9, 0x81, 0xd4, 0xbf, 0xe7, 0xaa, 0xd5, 0xd1, 0x44,
	0x7f, 0x63, 0x3f, 0x09, 0x68, 0xc8, 0xd5, 0xbc, 0x45, 0xe4, 0x06, 0x7a, 0x5a, 0x56, 0x16, 0x4d,
	0xd4, 0x8d, 0xfd, 0x24, 0x9c, 0x8d, 0xa6, 0xf5, 0xdd, 0x6d, 0xa0, 0x29, 0xad, 0x35, 0xda, 0x7c,
	0x32, 0x5e, 0x43, 0xd7, 0x01, 0x72, 0x0b, 0xa4, 0x40, 0x63, 0xb9, 0x60, 0x96, 0x4b, 0x91, 0x99,
	0x6a, 0x23, 0xd0, 0x36, 0x15, 0x9c, 0x7e, 0x51, 0x52, 0x27, 0x90, 0x0b, 0x08, 0x05, 0xbe, 0xd8,
	0x6c, 0x27, 0x55, 0xc6, 0x55, 0x73, 0x44, 0x50, 0xa3, 0x27, 0xa9, 0x16, 0x6a, 0xf6, 0xee, 0x81,
	0x9f, 0xae, 0x96, 0x64, 0x06, 0xc3, 0xd4, 0x22, 0x2b, 0x17, 0x6d, 0x89, 0xe4, 0xff, 0x67, 0x1c,
	0x57, 0xfc, 0x78, 0xf0, 0x2d, 0xdf, 0xe4, 0x0f, 0xb9, 0x87, 0x13, 0x8a, 0x25, 0x32, 0x83, 0xbf,
	0xd9, 0x7a, 0x80, 0x51, 0x6a, 0x65, 0x89, 0xe2, 0xb8, 0xb4, 0x10, 0x5b, 0xf9, 0xf3, 0xe2, 0xa6,
	0xe7, 0x9e, 0xc4, 0xdd, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x2a, 0x08, 0x98, 0x1f, 0x02,
	0x00, 0x00,
}
